small_tr_pca <- preProcess(small_tr, method = "pca", thresh = .8)
pca_train <- predict(small_tr_pca, small_tr)
pca_train$diagnosis <- training$diagnosis
pca_fit <- train(diagnosis ~ ., method = "glm", data = pca_train)
pca_test <- predict(small_tr_pca, small_te)
confusionMatrix(testing$diagnosis, predict(pca_fit, pca_test))
nonpca_train <- small_tr
nonpca_train$diagnosis <- training$diagnosis
nonpca_fit <- train(diagnosis ~ ., method = "glm", data = nonpca_train)
nonpca_test <- predict(small_tr, small_te)
confusionMatrix(testing$diagnosis, predict(nonpca_fit, nonpca_test))
nonpca_train <- small_tr
nonpca_train$diagnosis <- training$diagnosis
nonpca_fit <- train(diagnosis ~ ., method = "glm", data = nonpca_train)
nonpca_test <- predict(nonpca_fit, small_te)
confusionMatrix(testing$diagnosis, predict(nonpca_fit, nonpca_test))
nonpca_fit <- glm(diagnosis ~ ., family = "binomial", data = nonpca_train)
nonpca_test <- predict(nonpca_fit, small_te)
confusionMatrix(testing$diagnosis, predict(nonpca_fit, nonpca_test))
nonpca_test <- predict(nonpca_fit, small_te)
nonpca_test <- predict(nonpca_fit, newdata = small_te)
head(non_pcatest)
nonpca_test <- predict(nonpca_fit, newdata = small_te)
confusionMatrix(testing$diagnosis, predict(nonpca_fit, nonpca_test))
confusionMatrix(testing$diagnosis,nonpca_test)
rm(list = ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training)
plot(seq_along(training), training$CompressiveStrength)
plot(seq_along(training[,1]), training$CompressiveStrength)
plot(seq_along(training[,9]), training$CompressiveStrength)
?featurePlot
featurePlot(training)
featurePlot(y = training$CompressiveStrength, x = seq_along(training[,1]))
featurePlot(y = training$CompressiveStrength, x = seq_along(training[,2]))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_fill_brewer(palette="Spectral")
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(4))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(1))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(2))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(3))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(4))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(5))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(6))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_colour_gradientn(colours=rainbow(7))
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_fill_brewer()
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_fill_brewer(palette = "YlOrRd")
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Cement, data = training) +
scale_fill_brewer(palette="Set1")
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = names(training)[2], data = training) +
scale_fill_brewer(palette="Set1")
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = names(training), data = training) +
scale_fill_brewer(palette="Set1")
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = names(training)[3], data = training) +
scale_fill_brewer(palette="Set1")
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = FlyAsh, data = training) +
scale_fill_brewer(palette="Set1")
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = Age, data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Age, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(FlyAsh, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(BlastFunaceSlag, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(BlastFurnaceSlag, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(BlastFurnaceSlag, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Water, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Superplastisizer, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Superplasticizer, g = 3), data = training)
colour = cut2(CoarseAggregate, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(CoarseAggregate, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(FineAggregate, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Age, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(ComprehensiveStrength, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(CompressiveStrength, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(CompressiveStrength, g = 3), data = training, geom = "density")
qplot(y = CompressiveStrength, x = Age, colour = cut2(CompressiveStrength, g = 3), data = training, geom = "density")
qplot(x = CompressiveStrength, colour = cut2(Age, g = 3), data = training, geom = "density")
qplot(x = CompressiveStrength, colour = cut2(FlyAsh, g = 3), data = training, geom = "density")
qplot(x = CompressiveStrength, colour = cut2(Age, g = 2), data = training, geom = "density")
qplot(x = CompressiveStrength, colour = cut2(Age, g = 5), data = training, geom = "density")
qplot(x = CompressiveStrength, colour = cut2(Age, g = 4), data = training, geom = "density")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData1 = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData1[-testIndex,]
testing1 = adData1[testIndex,]
set.seed(42)
adData1 = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData1[-testIndex,]
testing1 = adData1[testIndex,]
set.seed(42)
adData2 = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training2 = adData[trainIndex,]
testing2 = adData[-trainIndex,]
set.seed(42)
adData2 = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training2 = adData2[trainIndex,]
testing2 = adData2[-trainIndex,]
all.equal(training1, training2)
set.seed(42)
adData1 = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData1[-testIndex,]
testing1 = adData1[testIndex,]
set.seed(42)
adData2 = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.50,list=FALSE)
training2 = adData2[trainIndex,]
testing2 = adData2[-trainIndex,]
all.equal(training1, training2)
all.equal(training1[1:166], training2[1:166])
all.equal(training1[1:166,], training2[1:166,])
all.equal(training1[1:166,], training2[1:166,])
all.equal(training1[1:166,], testing2[1:166,])
all.equal(training1, testing2)
set.seed(42)
adData2 = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData1[-testIndex,]
testing1 = adData1[testIndex,]
set.seed(42)
adData2 = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training2 = adData2[trainIndex,]
testing2 = adData2[-trainIndex,]
all.equal(training1, testing2)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
set.seed(42)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData[-testIndex,]
testing1 = adData[testIndex,]
set.seed(42)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training2 = adData[trainIndex,]
testing2 = adData[-trainIndex,]
all.equal(training1, testing2)
qplot(x = CompressiveStrength, colour = cut2(Age, g = 3), data = training)
qplot(x = CompressiveStrength, fill = cut2(Age, g = 3), data = training)
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Age, g = 3), data = training) + geom_smooth())
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(FlyAsh, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(x = CompressiveStrength, fill = cut2(Age, g = 3), data = training)
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
set.seed(42)
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
set.seed(1000)
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
set.seed(65565)
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = seq_along(CompressiveStrength), colour = cut2(Age, g = 3), data = training) + geom_smooth()
qplot(y = CompressiveStrength, x = sample(seq_along(CompressiveStrength)), colour = cut2(Age, g = 3), data = training) + geom_smooth()
?train
fit <- train(CompressiveStrength ~ ., data = training, method = "lm")
summary(fit)
plot(training$CompressiveStrength, predict(fit, newdata = training[,-9]))
qplot(y = fit$residuals, x = seq_along(CompressiveStrength), colour = cut2(Age, g = 3), data = training)
qplot(y = fit$residuals, x = seq_along(training$CompressiveStrength), colour = cut2(training$Age, g = 3))
resid(fit)
qplot(y = resid(fit), x = seq_along(training$CompressiveStrength), colour = cut2(training$Age, g = 3))
qplot(y = resid(fit), x = seq_along(training$CompressiveStrength), colour = cut2(training$Age, g = 3)) + geom_smooth()
qplot(y = resid(fit), x = seq_along(training$CompressiveStrength), colour = cut2(training$FlyAsh, g = 3)) + geom_smooth()
qplot(y = resid(fit), x = seq_along(training$CompressiveStrength), colour = cut2(training$FlyAsh, g = 3))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(x=index, y=CompressiveStrength)) + geom_point() +
theme_bw()
# Step-like pattern -> 4 categories
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=4)
summary(cutCompressiveStrength)
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
# Another way
library(plyr)
splitOn <- cut2(training$Age, g=4)
splitOn <- mapvalues(splitOn,
from=levels(factor(splitOn)),
to=c("red", "blue", "yellow", "green"))
plot(training$CompressiveStrength, col=splitOn)
# There is a step-like pattern in the plot of outcome versus index
# in the training set that isn't explained by any of the predictor
# variables so there may be a variable missing.
splitOn <- cut2(training$FlyAsh, g=4)
splitOn <- mapvalues(splitOn,
from=levels(factor(splitOn)),
to=c("red", "blue", "yellow", "green"))
plot(training$CompressiveStrength, col=splitOn)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
# No relation between the outcome and other variables
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(x=index, y=CompressiveStrength)) + geom_point() +
theme_bw()
# Step-like pattern -> 4 categories
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=4)
summary(cutCompressiveStrength)
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
# Another way
library(plyr)
splitOn <- cut2(training$FlyAsh, g=4)
splitOn <- mapvalues(splitOn,
from=levels(factor(splitOn)),
to=c("red", "blue", "yellow", "green"))
plot(training$CompressiveStrength, col=splitOn)
plot(sample(training$CompressiveStrength), col=splitOn)
plot(sample(training$CompressiveStrength), col=splitOn)
plot(sample(training$CompressiveStrength), col=splitOn)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
xnames <- colnames(concrete)[1:8]
featurePlot(x=training[, xnames], y=training$CompressiveStrength, plot="pairs")
# No relation between the outcome and other variables
index <- sample(seq_along(1:nrow(training)))
ggplot(data=training, aes(x=index, y=CompressiveStrength)) + geom_point() +
theme_bw()
# Step-like pattern -> 4 categories
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=4)
summary(cutCompressiveStrength)
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
# Another way
library(plyr)
splitOn <- cut2(training$FlyAsh, g=4)
splitOn <- mapvalues(splitOn,
from=levels(factor(splitOn)),
to=c("red", "blue", "yellow", "green"))
plot(training$CompressiveStrength, col=splitOn)
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
cutCompressiveStrength <- cut2(training$CompressiveStrength, g=3)
summary(cutCompressiveStrength)
ggplot(data=training, aes(y=index, x=cutCompressiveStrength)) +
geom_boxplot() + geom_jitter(col="blue") + theme_bw()
ggplot(data = training, aes(y = index, x = CompressiveStrength, col = splitOn))
ggplot(data = training, aes(y = index, x = CompressiveStrength, col = splitOn)) + geom_point()
ggplot(data = training, aes(y = index, x = CompressiveStrength, col = splitOn)) + geom_point()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(y = index, x = CompressiveStrength, col = splitOn)) + geom_point()
ggplot(data = training, aes(y = sample(index), x = CompressiveStrength, col = splitOn)) + geom_point()
??grid.arrange
library(gridExtra)
g1 <- ggplot(data = training, aes(y = index, x = CompressiveStrength, col = splitOn)) + geom_point()
g2 <- ggplot(data = training, aes(y = sample(index), x = CompressiveStrength, col = splitOn)) + geom_point()
grid.arrange(g1, g2, ncol = 2)
g1 <- ggplot(data = training, aes(x = index, y = CompressiveStrength, col = splitOn)) + geom_point()
g2 <- ggplot(data = training, aes(x = sample(index), y = CompressiveStrength, col = splitOn)) + geom_point()
grid.arrange(g1, g2, ncol = 2)
g1 <- ggplot(data = training, aes(x = index, y = CompressiveStrength, col = splitOn)) + geom_point()
g2 <- ggplot(data = training, aes(x = sample(index), y = CompressiveStrength, col = splitOn)) + geom_point()
grid.arrange(g1, g2, nrow = 2)
Cuts <- cut2(training$FlyAsh, g=3)
Cuts <- mapvalues(Cuts,
from=levels(factor(Cuts)),
to=c("red", "blue", "green"))
g1 <- ggplot(data = training, aes(x = index, y = CompressiveStrength, col = splitOn)) + geom_point()
g2 <- ggplot(data = training, aes(x = sample(index), y = CompressiveStrength, col = splitOn)) + geom_point()
grid.arrange(g1, g2, nrow = 2)
Cuts <- cut2(training$FlyAsh, g=3)
Cuts <- mapvalues(Cuts,
from=levels(factor(Cuts)),
to=c("red", "blue", "green"))
g1 <- ggplot(data = training, aes(x = index, y = CompressiveStrength, col = Cuts)) + geom_point()
g2 <- ggplot(data = training, aes(x = sample(index), y = CompressiveStrength, col = Cuts)) + geom_point()
grid.arrange(g1, g2, nrow = 2)
g1 <- ggplot(data = training, aes(x = index, y = CompressiveStrength, col = Cuts)) + geom_point() + geom_smooth()
g2 <- ggplot(data = training, aes(x = sample(index), y = CompressiveStrength, col = Cuts)) + geom_point() + geom_smooth()
grid.arrange(g1, g2, nrow = 2)
Cuts <- cut2(training$Age, g=3)
Cuts <- mapvalues(Cuts,
from=levels(factor(Cuts)),
to=c("red", "blue", "green"))
g1 <- ggplot(data = training, aes(x = index, y = CompressiveStrength, col = Cuts)) + geom_point() + geom_smooth()
g2 <- ggplot(data = training, aes(x = sample(index), y = CompressiveStrength, col = Cuts)) + geom_point() + geom_smooth()
grid.arrange(g1, g2, nrow = 2)
install.packages("caret")
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
library(caret)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mdl_rf <- train(diagnosis ~ ., data = training, method = "rf")
#mdl_rf <- randomForest(diagnosis ~ ., data = training)
#set.seed(62433)
mdl_gbm <- train(diagnosis ~ ., data = training, method = "gbm", verbose = FALSE)
#mdl_gbm <- gbm(diagnosis ~ ., data = training, verbose = FALSE, distribution = "multinomial")
#set.seed(62433)
mdl_lda <- train(diagnosis ~ ., data = training, method = "lda")
#mdl_lda <- lda(diagnosis ~ ., data = training)
pred_rf <- predict(mdl_rf, newdata = testing)
pred_gbm <- predict(mdl_gbm, newdata = testing)
pred_lda <- predict(mdl_lda, newdata = testing)
# pred_rf <- predict(mdl_rf, newdata = training)
# pred_gbm <- predict(mdl_gbm, newdata = training)
# pred_lda <- predict(mdl_lda, newdata = training)
ds_all <- data_frame(diagnosis = testing$diagnosis, pred_rf, pred_gbm, pred_lda)
#ds_all <- data_frame(diagnosis = training$diagnosis, pred_rf, pred_gbm, pred_lda)
#set.seed(62433)
mdl_all <- train(diagnosis ~ ., method = "rf", data = ds_all)
#mdl_all <- randomForest(diagnosis ~ ., data = ds_all)
pred_all <- predict(mdl_all, newdata = ds_all)
round(confusionMatrix(testing$diagnosis, pred_rf)$overall, 2)
round(confusionMatrix(testing$diagnosis, pred_gbm)$overall, 2)
round(confusionMatrix(testing$diagnosis, pred_lda)$overall, 2)
round(confusionMatrix(testing$diagnosis, pred_all)$overall, 2)
ds_all <- data_frame(diagnosis = testing$diagnosis, pred_rf, pred_gbm, pred_lda)
ds_all <- data.frame(diagnosis = testing$diagnosis, pred_rf, pred_gbm, pred_lda)
mdl_all <- train(diagnosis ~ ., method = "rf", data = ds_all)
#mdl_all <- randomForest(diagnosis ~ ., data = ds_all)
pred_all <- predict(mdl_all, newdata = ds_all)
round(confusionMatrix(testing$diagnosis, pred_rf)$overall, 2)
round(confusionMatrix(testing$diagnosis, pred_gbm)$overall, 2)
round(confusionMatrix(testing$diagnosis, pred_lda)$overall, 2)
round(confusionMatrix(testing$diagnosis, pred_all)$overall, 2)
confusionMatrix(testing$diagnosis, pred_all
confusionMatrix(testing$diagnosis, pred_all)
confusionMatrix(testing$diagnosis, pred_all)
rm(list = ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(log(trainig$SuperPlastisizer))
hist(log(trainig$Superplastisizer))
hist(log(training$Superplastisizer))
hist(training$Superplastisizer)
10^(-1:1)
Sys.which("git")
install.packages("Shiny")
yes
y
1
install.packages("Shiny")
1
install.packages("Shiny")
y
install.packages("shiny")
install.packages("shinyapps")
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio)
devtools::install_github('rstudio/shinyapps')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='tstrawclown', token='D3DCC65440858923A5E6199895A0E9CF', secret='MGSdNrL7DAfQFIo38K7zjqc9obCa8Nh4qhg9cHHu')
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
install.packages("flexdashboard")
install.packages(c("BH", "car", "caret", "corrplot", "curl", "DBI", "evaluate", "forecast", "formatR", "gbm", "GGally", "ggplot2", "gridExtra", "gtable", "highr", "HistData", "Hmisc", "htmltools", "httr", "jsonlite", "kernlab", "latticeExtra", "lazyeval", "lme4", "lubridate", "munsell", "nlme", "plyr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "repmis", "rpart.plot", "RWeka", "RWekajars", "scales", "scatterplot3d", "stringi", "swirl", "testthat", "tseries", "zoo"))
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv/rCharts')
require(devtools)
install_github('ramnathvrCharts')
require(devtools)
install_github('ramnathv/rCharts')
require(devtools)
install_github('GoogleVis')
install.packages("GoogleVis")
install.packages("googleVis")
install.packages("plotly")
dataset(Exports)
library(datasets)
datasets::Exports
??datasets
??Exports
library(help = "datasets")
library(googleVis)
x <- gvisMotionChart(Fruits)
x <- gvisMotionChart(Fruits, "Fruit", "Year")
x
plot(x)
demo(googleVIs)
demo(googleVis)
install_github('ropensci/plotly')
library(rChards)
library(rCharts)
data("HairEyeColor")
HairEyeColor
d <- as.data.frame(HairEyeColor)
df
d
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male'))
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = as.data.frame(subset(haireye, Sex=='Male')))
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(as.data.frame(haireye), Sex=='Male'))
haireye <- as.data.frame(data("HairEyeColor"))
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(as.data.frame(haireye), Sex=='Male'))
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male'))
haireye
haireye <- as.data.frame(data(HairEyeColor))
haireye
haireye <- as.data.frame(HairEyeColor)
haireye
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male'))
n1
rm(list = ls())
library(rCharts)
data("HairEyeColor")
haireye <- data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male')
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male'))
n1
library(rCharts)
data("HairEyeColor")
haireye <- data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male')
n1
library(rCharts)
data("HairEyeColor")
haireye <- data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male')
plot(n1)
library(rCharts)
data("HairEyeColor")
haireye <- data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Male')
print(n1)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Female')
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Female'))
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data = subset(haireye, Sex=='Female'))
n1
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myplot
?manipulate
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
rm(list = ls())
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
setwd("D:/Coursera/data_science/gitrepo/DevelopingDataProducts")
libraryr(slidify)
library(slidify)
author("TstSlidify")
setwd("D:/Coursera/data_science/gitrepo/DevelopingDataProducts/TstSlidify")
slidify(index/Rmd)
slidify(index.Rmd)
slidify("index.Rmd")
setwd("D:/Coursera/data_science/gitrepo/DevelopingDataProducts/TstRPubs")
